<?php

namespace Miny\Event;

require_once dirname(__FILE__) . '/../../Event/Event.php';
require_once dirname(__FILE__) . '/../../Event/EventHandler.php';
require_once dirname(__FILE__) . '/../../Event/EventDispatcher.php';

class FooHandler extends EventHandler
{
    private $id;

    public function __construct($id)
    {
        $this->id = $id;
    }

    public function handle(Event $event)
    {
        echo $this->id;
    }

}

class BarHandler extends FooHandler
{
    public function foo_handler(Event $event)
    {
        $this->handle($event);
        echo '::foo_handler';
    }

}

/**
 * Test class for EventDispatcher.
 * Generated by PHPUnit on 2012-08-02 at 23:44:36.
 */
class EventDispatcherTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var EventDispatcher
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $ed = new EventDispatcher;
        $ed->setHandler('event_a', new FooHandler(0));
        $ed->setHandler('event_a', new FooHandler(1));
        $ed->setHandler('event_b', new FooHandler(0));
        $ed->setHandler('event_b', new FooHandler(2));
        $ed->setHandler('event_b', new FooHandler(1), NULL, 1);
        $ed->setHandler('event_c', new BarHandler(0), 'foo_handler');
        $ed->setHandler('event_c', new BarHandler(1), 'bar_handler');
        $this->object = $ed;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers Miny\Event\EventDispatcher::setHandler
     * @covers Miny\Event\EventDispatcher::raiseEvent
     */
    public function testHandler()
    {
        $event = new Event('unhandled_event');
        $this->object->raiseEvent($event);
        $this->assertFalse($event->isHandled());

        $event = new Event('event_a');
        ob_start();
        $this->object->raiseEvent($event);
        $this->assertEquals('01', ob_get_clean());
        $this->assertTrue($event->isHandled());

        $event = new Event('event_b');
        ob_start();
        $this->object->raiseEvent($event);
        $this->assertEquals('012', ob_get_clean());
        $this->assertTrue($event->isHandled());

        $event = new Event('event_c');
        ob_start();
        $this->object->raiseEvent($event);
        $this->assertEquals('0::foo_handler1', ob_get_clean());
        $this->assertTrue($event->isHandled());
    }

}

?>
